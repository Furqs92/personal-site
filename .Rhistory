library(pkg, character.only = T)
}
}
pkgs <- c("igraphdata","igraph","ggplot2","dplyr","data.table","tidyr","network","sna","kableExtra","visNetwork")
load_reqs(pkgs)
# Matrix
links_unweighted <- as.matrix(table(data4$user,data4$product))
#
sparse <- links_unweighted %*% t(links_unweighted) %>% graph_from_adjacency_matrix(mode = "undirected", weighted=NULL,diag=F)
edges <- get.data.frame(sparse, what="edges")
new <- graph.data.frame(edges,directed=FALSE,vertices = nodes)
#E(sparse)$reviewer_name <- list(data4$reviewer_name)
#V(sparse)[1]$product_type <- list(data4$product_type)
#V(sparse)[1]$product <- list(data4$product)
#V(sparse)[1]$helpful <- list(data4$helpful_ratings)
#colrs <- c("aliceblue","coral","darkorange","mediumorchid1","mediumvioletred","green","blue","bl   ack","gray50", "tomato","gold","thistle1","tan4","palegreen","maroon2","maroon","olivedrab1","gre   enyellow","aquamarine","orangered4")
#V(sparse)$color <- colrs[V(sparse)$product[[1]]]
# IGraph
new
# colors
z <- unique(nodes$product)
range01 <- function(x)(x-min(x))/diff(range(x))
rainbow(7)
cRamp <- function(x){
cols <- colorRamp(colours())(range01(x))
apply(cols, 1, function(xt)rgb(xt[1], xt[2], xt[3], maxColorValue=255))
}
nodes$col <- as.factor(cRamp(match(nodes$product,z)))
color_vertices <- nodes %>% group_by(product, col) %>% summarise(n = n())
rlang::last_error()
# Matrix
links_unweighted <- as.matrix(table(data4$user,data4$product))
#
sparse <- links_unweighted %*% t(links_unweighted) %>% graph_from_adjacency_matrix(mode = "undirected", weighted=NULL,diag=F)
edges <- get.data.frame(sparse, what="edges")
new <- graph.data.frame(edges,directed=FALSE,vertices = nodes)
#E(sparse)$reviewer_name <- list(data4$reviewer_name)
#V(sparse)[1]$product_type <- list(data4$product_type)
#V(sparse)[1]$product <- list(data4$product)
#V(sparse)[1]$helpful <- list(data4$helpful_ratings)
#colrs <- c("aliceblue","coral","darkorange","mediumorchid1","mediumvioletred","green","blue","bl   ack","gray50", "tomato","gold","thistle1","tan4","palegreen","maroon2","maroon","olivedrab1","gre   enyellow","aquamarine","orangered4")
#V(sparse)$color <- colrs[V(sparse)$product[[1]]]
# IGraph
new
# colors
z <- unique(nodes$product)
range01 <- function(x)(x-min(x))/diff(range(x))
rainbow(7)
cRamp <- function(x){
cols <- colorRamp(colours())(range01(x))
apply(cols, 1, function(xt)rgb(xt[1], xt[2], xt[3], maxColorValue=255))
}
nodes$col <- as.factor(cRamp(match(nodes$product,z)))
color_vertices <- nodes %>% dplyr::group_by(product, col) %>% summarise(n = n())
View(nodes)
edge_betweenness
nodes$reviewer_name[nodes$user==A17CU1D2CWXOHB]
nodes$reviewer_name[nodes$user=='A17CU1D2CWXOHB']
nodes$reviewer_name[nodes$user=='A3HLW3G0TA8GX1']
to <- nodes$reviewer_name[nodes$user=='A3HLW3G0TA8GX1']
to
from <- nodes$reviewer_name[nodes$user=='A17CU1D2CWXOHB']
from
# Diameter
#diameter(sparse, directed = FALSE)
new_diameter <- new
node_diameter <- get.diameter(new_diameter,  directed = FALSE)
# Plotting longest diameter
#V(sparse_diameter)$color <- "blue"
V(new_diameter)$size <- 3
#V(sparse_diameter)[node_diameter]$color <- "red"
V(new_diameter)[node_diameter]$size <- 5
E(new_diameter)$color <- "grey"
E(new_diameter)$width <- 1
E(new_diameter, path = node_diameter)$color <- "red"
E(new_diameter, path = node_diameter)$width <- 5
plot(new_diameter,
vertex.label = " ",
vertex.color= nodes$col,
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8,
edge.arrow.size = 0.5)
legend("topleft", legend = c(NA, "Product:", as.character(color_vertices$product), NA, "Edge color:", "Longest Diameter"), pch =19,
col = c(NA, NA, color_vertices$col, NA, NA, E(new_diameter, path = node_diameter)$color), pt.cex = 1, cex = 0.5, bty = "n", ncol = 1,
title = "")
node_diameter
nodes$reviewer_name[nodes$user=='AKSFZ4G1AXYFC']
nodes$reviewer_name[nodes$user=='A2EZWZ8MBEDOLN']
nodes$reviewer_name[nodes$user=='AMNTZU1YQN1TH']
nodes$reviewer_name[nodes$user== c('AKSFZ4G1AXYFC','A2EZWZ8MBEDOLN', 'AMNTZU1YQN1TH',  'A2NYK9KWFMJV4Y','A2RS66Y79Q8X0W', 'A3HLW3G0TA8GX1','A1FI4UL6C50NZJ')]
nodes$reviewer_name[nodes$user== 'A2NYK9KWFMJV4Y']
nodes$reviewer_name[nodes$user== 'A2RS66Y79Q8X0W']
nodes$reviewer_name[nodes$user== 'A3HLW3G0TA8GX1']
nodes$reviewer_name[nodes$user== 'A1FI4UL6C50NZJ']
# Transitivity
#transitivity(sparse, type = "global")
transitivity <- data.frame(user = V(new)$name,
transitivity = transitivity(new, type = "local"),
reviewer_name = nodes$reviewer_name)
union_characters <- left_join(union_characters, transitivity, by = c("reviewer_name" = "reviewer_name", "user"= "user"))
transitivity %>%
arrange(-transitivity) %>%
.[1:10, ]
# Page rank Centrality
page_rank <- page.rank(new, directed = FALSE)
page_rank_centrality <- data.frame(user = names(page_rank$vector),
page_rank = page_rank$vector,
reviewer_name = nodes$reviewer_name)
union_characters <- left_join(union_characters, page_rank_centrality, by = c("reviewer_name" = "reviewer_name", "user"= "user"))
page_rank_centrality %>%
arrange(-page_rank) %>%
.[1:10, ]
# Eigen Values and Eigen Vector
#degree_diag <- diag(1 / igraph::degree(sparse))
#pagerank <- adjacency %*% degree_diag
#eigenvalues <- eigen(pagerank)
#eigenvector <- data.frame(user = rownames(pagerank),
#eigenvector = as.numeric(eigenvalues$vectors[, which.max(eigenvalues$values)]))
#union_characters <- left_join(union_characters, eigenvector, by = c("user","user"))
# Eigen centrality
eigen_centrality <- igraph::eigen_centrality(new, directed = FALSE)
eigen_centrality <- data.frame(user = names(eigen_centrality$vector),
eigen_centrality = eigen_centrality$vector,
reviewer_name = nodes$reviewer_name) %>%
mutate(user = as.character(user))
union_characters <- left_join(union_characters, eigen_centrality, by =  c("reviewer_name" = "reviewer_name", "user"= "user"))
eigen_centrality %>%
arrange(-eigen_centrality) %>%
.[1:10, ]
# Plot
union_characters["product_category"] <- data4$product_category
union_characters %>%
filter(!is.na(product_category)) %>%
dplyr::select(-contains("_std")) %>%
dplyr::select(-reviewer_name) %>%
gather(x, y, degree:eigen_centrality) %>%
ggplot(aes(x = user, y = y, color=product_category)) +
geom_point(size = 0.5) +
facet_grid(x ~ product_category, scales = "free") +
theme_bw() +
theme(axis.text.x = element_blank())
# Plot
union_characters["product_category"] <- data4$product_category
union_characters %>%
filter(!is.na(product_category)) %>%
dplyr::select(-contains("_std")) %>%
dplyr::select(-reviewer_name) %>%
gather(x, y, degree:eigen_centrality) %>%
ggplot(aes(x = user, y = y, color=product_category)) +
geom_point(size = 0.5) +
facet_grid(x ~ product_category, scales = "free") +
theme_bw() +
theme(axis.text.x = element_text(angle=45))
# Plot
union_characters["product_category"] <- data4$product_category
union_characters %>%
filter(!is.na(product_category)) %>%
dplyr::select(-contains("_std")) %>%
dplyr::select(-reviewer_name) %>%
gather(x, y, degree:eigen_centrality) %>%
ggplot(aes(x = user, y = y, color=product_category)) +
geom_point(size = 0.5) +
facet_grid(x ~ product_category, scales = "free") +
theme_bw() +
theme(axis.text.x = element_blank())
# Cluster Dendrogram
adj_network <- network(adjacency, directed = TRUE)
# Matrix representation of a network
adjacency <- as.matrix(as_adjacency_matrix(sparse))
# Eigen Values and Eigen Vector
#degree_diag <- diag(1 / igraph::degree(sparse))
#pagerank <- adjacency %*% degree_diag
#eigenvalues <- eigen(pagerank)
#eigenvector <- data.frame(user = rownames(pagerank),
#eigenvector = as.numeric(eigenvalues$vectors[, which.max(eigenvalues$values)]))
#union_characters <- left_join(union_characters, eigenvector, by = c("user","user"))
# Eigen centrality
eigen_centrality <- igraph::eigen_centrality(new, directed = FALSE)
eigen_centrality <- data.frame(user = names(eigen_centrality$vector),
eigen_centrality = eigen_centrality$vector,
reviewer_name = nodes$reviewer_name) %>%
mutate(user = as.character(user))
union_characters <- left_join(union_characters, eigen_centrality, by =  c("reviewer_name" = "reviewer_name", "user"= "user"))
eigen_centrality %>%
arrange(-eigen_centrality) %>%
.[1:10, ]
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(new)
dendPlot(ceb, mode="hclust")
plot(ceb, new, vertex.label=" ")
membership(ceb)
modularity(ceb)
# Cluster Dendrogram
adj_network <- network(adjacency, directed = TRUE)
adj_network
ec <- equiv.clust(adj_network, mode = "graph",
cluster.method = "average",
plabels = network.vertex.names(adj_network))
ec$cluster$labels <- ec$plabels
par(cex=0.5, mar=c(5, 8, 4, 1))
plot(ec)
# Cluster Dendrogram
adj_network <- network(adjacency, directed = TRUE)
adj_network
ec <- equiv.clust(adj_network, mode = "graph",
cluster.method = "average",
plabels = network.vertex.names(adj_network))
ec$cluster$labels <- ec$plabels
par(cex=0.5, mar=c(5, 8, 4, 1))
plot(ec)
# Cluster Dendrogram
adj_network <- network(adjacency, directed = TRUE)
adj_network
ec <- equiv.clust(adj_network, mode = "graph",
cluster.method = "average",
plabels = network.vertex.names(adj_network))
ec$cluster$labels <- ec$plabels
par(cex=0.5, mar=c(5, 8, 4, 1))
plot(ec)
membership(ceb)[11]
membership(ceb)[membership==11]
membership(ceb)[membership=11]
table(membership(ceb))
new
cluster_edge_betweenness(new, directed = FALSE,
edge.betweenness = TRUE, merges = TRUE, bridges = TRUE,
modularity = TRUE, membership = TRUE)
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(graph, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                   bridges = TRUE,modularity = TRUE, membership = TRUE)
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
dendPlot(ceb, mode="hclust")
plot(ceb, new, vertex.label=" ")
membership(ceb)
modularity(ceb)
ceb
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
ceb
dendPlot(ceb, mode="hclust")
plot(ceb, new, vertex.label=" ")
membership(ceb)
modularity(ceb)
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
dendPlot(ceb, mode="hclust")
plot(ceb, new, vertex.label=" ")
#membership(ceb)
#modularity(ceb)
ceb
unlist(ceb)
show_trace(ceb)
show_trace(new)
ceb$membership
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
dendPlot(ceb, mode="hclust")
plot(ceb, new, vertex.label=" ")
#membership(ceb)
#modularity(ceb)
ceb
V(new)$community <- ceb$membership
rain <- rainbow(14, alpha=.5)
V(new)$color <- rain[V(new)$community]
E(new)$color <- apply(as.data.frame(get.edgelist(new)), 1,
function(x) ifelse(V(new)$community[x[1]] == V(new)$community[x[2]],
rain[V(new)$community[x[1]]], '#00000000'))
plot(new, vertex.size=4, vertex.label=NA, edge.color=E(new)$color)
new
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
dendPlot(ceb, mode="hclust")
plot(ceb, new, vertex.label=" ")
#membership(ceb)
#modularity(ceb)
ceb
V(new)$community <- ceb$membership
rain <- rainbow(14, alpha=.5)
V(new)$color <- rain[V(new)$community]
E(new)$color <- apply(as.data.frame(get.edgelist(new)), 1,
function(x) ifelse(V(new)$community[x[1]] == V(new)$community[x[2]],
rain[V(new)$community[x[1]]], '#00000000'))
plot(new, vertex.size=4, vertex.label=NA, edge.color=E(new)$color)
legend("topleft", legend = c(NA, "Product:", as.character(color_vertices$product), NA, "Edge color:", "Longest Diameter"), pch =19,
col = c(NA, NA, color_vertices$col, NA, NA, E(new_diameter, path = node_diameter)$color), pt.cex = 1, cex = 0.5, bty = "n", ncol = 1,
title = "")
V(new)$community
unique(V(new)$community)
V(new)$color
unique(V(new)$color)
# Clustering 1
clp <- cluster_label_prop(new)
par(cex=0.2, mar=c(5, 8, 4, 1))
plot(clp,
sparse,
vertex.size=3,
vertex.color= nodes$user,
vertex.label = " ",
vertex.frame.color = "gray",
vertex.label.color = "black",
vertex.label.cex = 0.8) #,
# vertex.size = (V(sparse)$helpful[[1]] + 0.5) * 2
# Clustering 2
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
dendPlot(ceb, mode="hclust")
plot(ceb, new, vertex.label=" ")
#membership(ceb)
#modularity(ceb)
ceb
V(new)$community <- ceb$membership
rain <- rainbow(14, alpha=.5)
V(new)$color <- rain[V(new)$community]
E(new)$color <- apply(as.data.frame(get.edgelist(new)), 1,
function(x) ifelse(V(new)$community[x[1]] == V(new)$community[x[2]],
rain[V(new)$community[x[1]]], '#00000000'))
plot(new, vertex.size=4, vertex.label=NA, edge.color=E(new)$color)
legend("topleft", legend = c(NA, "Communities:", as.character(unique(V(new)$community)), NA), pch =19,
col = c(NA, NA, unique(V(new)$color), NA, NA), pt.cex = 1, cex = 0.5, bty = "n", ncol = 1,
title = "")
legend("topleft", legend = "", cex = 1, bty = "n", ncol = 1,
title = "Community Detection")
list(membership(ceb))
ceb
library('igraphdata')
library('igraph')
data(karate)
ceb <- cluster_edge_betweenness(karate)
dendPlot(ceb, mode="hclust")
plot(ceb, karate)
modularity(ceb)
membership(ceb)
g.er <- sample_gnp(20, 0.02)
plot(g.er, layout=layout.circle, vertex.label=NA)
g.er <- erdos.renyi.game(100, 0.5)
plot(g.er, layout=layout.circle, vertex.label=NA)
g.er <- sample_gnp(20, 0.02)
plot(g.er, layout=layout.circle, vertex.label=NA)
g.er <- erdos.renyi.game(100, 0.5)
plot(g.er, layout=layout.circle, vertex.label=NA)
cluster <-cluster_edge_betweenness(g.er)
modularity(cluster)
g.er <- sample_gnp(20, 0.02)
plot(g.er, layout=layout.circle, vertex.label=NA)
g.er <- erdos.renyi.game(100, 0.9)
plot(g.er, layout=layout.circle, vertex.label=NA)
cluster <-cluster_edge_betweenness(g.er)
modularity(cluster)
g.er <- sample_gnp(20, 0.02)
plot(g.er, layout=layout.circle, vertex.label=NA)
g.er <- erdos.renyi.game(100, 0.01)
plot(g.er, layout=layout.circle, vertex.label=NA)
cluster <-cluster_edge_betweenness(g.er)
modularity(cluster)
g.er <- sample_gnp(20, 0.02)
plot(g.er, layout=layout.circle, vertex.label=NA)
g.er <- erdos.renyi.game(100, 0.5)
plot(g.er, layout=layout.circle, vertex.label=NA)
cluster <-cluster_edge_betweenness(g.er)
modularity(cluster)
##Loading and installing required packages.
load_reqs <- function(reqs) {
for(pkg in reqs) {
if (!(pkg %in% installed.packages())) { install.packages(pkg)}
library(pkg, character.only = T)
}
}
pkgs <- c("igraph", "adapr", "stringr", "plyr", "splitstackshape",
"gridExtra", "kableExtra", "ggplot2", "dplyr", "reshape2", "tidyr",
"network", "sna", "visNetwork", "tibble","dendextend")
load_reqs(pkgs)
# Clustering
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
# Dendrogram
ceb %>% plot(main= "Clustering Analysis")
# Clustering
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
# Dendrogram
plot(ceb, mode="hclust")
# Clustering
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
# Dendrogram
dendPlot(ceb, mode="hclust")
# Community detection plot
V(new)$community <- ceb$membership
rain <- rainbow(14, alpha=.5)
V(new)$color <- rain[V(new)$community]
E(new)$color <- apply(as.data.frame(get.edgelist(new)), 1,
function(x) ifelse(V(new)$community[x[1]] == V(new)$community[x[2]],
rain[V(new)$community[x[1]]], '#00000000'))
plot(new, vertex.size=4, vertex.label=NA, edge.color=E(new)$color)
legend("topleft", legend = c(NA, "Communities:", as.character(unique(V(new)$community)), NA), pch =19,
col = c(NA, NA, unique(V(new)$color), NA, NA), pt.cex = 1, cex = 0.5, bty = "n", ncol = 1,
title = "")
legend("topleft", legend = "", cex = 1, bty = "n", ncol = 1,
title = "Community Detection")
# Clustering
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
# Dendrogram
plot(ceb, ylab="Height")
# Clustering
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
# Dendrogram
#plot(ceb, ylab="Height")
dend <- dendPlot(ceb, mode="hclust")
dend %>% set("labels_cex",1)
# Clustering
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
# Dendrogram
#plot(ceb, ylab="Height")
dend <- ceb  %>% hclust %>% as.dendrogram
# Clustering
ceb <- cluster_edge_betweenness(new, directed = FALSE, edge.betweenness = TRUE, merges = TRUE,                                     bridges = TRUE,modularity = TRUE, membership = TRUE)
# Dendrogram
#plot(ceb, ylab="Height")
dend <- ceb %>% dist %>% hclust %>% as.dendrogram
setwd("~/Documents/Madrid/IE/SecondTerm/RecommendationEngine/Assignment3/MuhammadFurqan")
setwd("~/Documents/Madrid/IE/SecondTerm/RecommendationEngine/Assignment3/MuhammadFurqan/personal-site")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/furqan/Documents/Madrid/IE/SecondTerm/RecommendationEngine/Assignment3/MuhammadFurqan/personal-site")
#render your sweet site.
rmarkdown::render_site()
``` {r}
# Loading Dataset
print("hello")
